--- index.js.new	2023-02-02 12:28:26.306600717 +0100
+++ index.js	2023-02-02 12:27:53.378410276 +0100
@@ -2604,7 +2604,8 @@
     }
     else {
         view.someProp("transformPastedHTML", f => { html = f(html, view); });
-        dom = readHTML(html);
+        if (typeof html == "string") dom = readHTML(html);
+        else dom = html;
         if (webkit)
             restoreReplacedSpaces(dom);
     }
--- index.js.orig	2023-05-22 10:41:47.247122876 +0200
+++ index.js	2023-05-22 10:43:56.148650769 +0200
@@ -1395,8 +1395,13 @@
 // Create a view desc for the top-level document node, to be exported
 // and used by the view class.
 function docViewDesc(doc, outerDeco, innerDeco, dom, view) {
+    const custom = view.nodeViews[doc.type.name];
+    const spec = custom?.(doc, view, () => { return 0; }, outerDeco);
     applyOuterDeco(dom, outerDeco, doc);
-    let docView = new NodeViewDesc(undefined, doc, outerDeco, innerDeco, dom, dom, dom, view, 0);
+    let docView = spec ?
+        new CustomNodeViewDesc(null, doc, outerDeco, innerDeco, dom, dom, dom, spec, view, 0)
+        :
+        new NodeViewDesc(undefined, doc, outerDeco, innerDeco, dom, dom, dom, view, 0);
     if (docView.contentDOM)
         docView.updateChildren(view, 0);
     return docView;
