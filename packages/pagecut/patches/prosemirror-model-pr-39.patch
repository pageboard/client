--- index.js    2023-01-18 16:25:47.799517726 +0100
+++ index.js    2023-01-18 16:47:21.407009902 +0100
@@ -2539,7 +2539,9 @@
             let rule = this.tags[i];
             if (matches(dom, rule.tag) &&
                 (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&
-                (!rule.context || context.matchesContext(rule.context))) {
+                (!rule.context || context.matchesContext(rule.context)) &&
+                (!rule.node || context.matchesType(this.schema.nodes[rule.node]))
+            ) {
                 if (rule.getAttrs) {
                     let result = rule.getAttrs(dom);
                     if (result === false)
@@ -3104,6 +3106,31 @@
         };
         return match(parts.length - 1, this.open);
     }
+    matchesType (type) {
+        const option = this.options.context;
+        const useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);
+        const minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);
+        const match = (depth) => {
+            const next = depth > 0 || (depth == 0 && useRoot) ? this.nodes[depth]
+                : option && depth >= minDepth ? option.node(depth - minDepth)
+                : null;
+            if (!next) return false;
+            if (next.match && next.match.matchType(type)) return true;
+            if (next.type) {
+                const nextMatch = function(next) {
+                    const { contentMatch } = next.type;
+                    if (contentMatch.matchType(type)) return true;
+                    if (!contentMatch.validEnd) {
+                        return nextMatch(contentMatch.next[contentMatch.next.length - 1]);
+                    }
+                    return false;
+                };
+                return nextMatch(next);
+            }
+            return match(depth - 1);
+        };
+        return match(this.open);
+    }
     textblockFromContext() {
         let $context = this.options.context;
         if ($context)
