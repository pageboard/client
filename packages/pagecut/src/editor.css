@import url('./prosemirror.css');

@import url('./prosemirror-gapcursor.css');

.ProseMirror {
	white-space: normal;
}

.ProseMirror [block-text] {
	white-space: pre-wrap;
	white-space: break-spaces;
}

.ProseMirror [contenteditable="false"] {
	white-space: normal;
}

.ProseMirror-content {
	outline:none;
}

img.ProseMirror-separator {
	width:0 !important;
}

[contenteditable="true"]:focus {
	outline: none;
}
pagecut-placeholder {
	display:none;
	position:relative;
}
pagecut-placeholder::after {
	content:'+';
	color:black;
	text-shadow: -1px -1px 0 white, 1px -1px 0 white, -1px 1px 0 white, 1px 1px 0 white;
	padding: 0 8px;
	cursor:pointer;
	font-family: monospace;
	font-size: 23px;
	font-style: normal;
	font-weight: normal;
	font-variant: normal;
}
[block-focused][block-type] [block-type]:not([block-focused]) pagecut-placeholder {
	display:none;
}
[block-focused][block-type] > pagecut-placeholder {
	display:inline-block;
}

pagecut-placeholder.ProseMirror-selectednode {
	display:inline-block;
	outline:none !important;
	box-shadow:none !important;
}
pagecut-placeholder.ProseMirror-selectednode::after {
	color:white;
	text-shadow: -1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black;
}

.ProseMirror-dropcursor {
	z-index: 2147483647; /* max z-index everywhere but Safari <= 3 */
}

li.ProseMirror-selectednode {
	outline: none !important;
	box-shadow:none !important;
}
li.ProseMirror-selectednode::after {
	outline: 2px solid rgb(121 153 238 / 60%) !important;
	outline-offset: -1px !important;
	border:none;
	inset: 0 0 0 -2em;
}
.ProseMirror-selectednode:not(img) {
	min-width:1em;
}

/* replaced elements cannot have pseudo elements,
 * that is why we must define is for both cases */
.ProseMirror-focused [block-focused="last"] {
	outline: 2px dashed rgb(97 163 228 / 50%) !important;
	outline-offset:-1px !important;
}
.ProseMirror-selectednode {
	outline: 2px solid rgb(121 153 238 / 60%) !important;
	outline-offset: -1px !important;
	cursor: pointer !important;
	box-shadow: 0 0 0 1px rgb(97 163 228) !important;
}
[block-focused="last"]:not(img) {
	min-width: 1em;
}
.ProseMirror *::selection {
	color:inherit;
}

::selection {
	background-color: #cce2ff;
}
